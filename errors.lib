# Обработка ошибок
if [ ! "$L_ERRORS_LIB" == "LOADED" ]; then
L_ERRORS_LIB="LOADED"

. $BASEDIRECTORY/colors.lib

# логирование
# $1 - текст в скобках [] (OK, ERROR, NEW, etc.)
# $2 - текст сообщения
# $3 - цвет скобок []
some_error(){
	COLOR=$3
	[ x$4 == "x2" ] || echo -e "${COLOR}[$1]${C_white} $2${C_NONE}"
	[ x$4 == "x1" ] || echo "[$1] $2" >> $LOG_FILE
}

# фатальная ошибка - сообщение с последующим выходом из программы
# $1 - текст сообщения
fatal_error(){
	some_error 'FATAL' "$1" $C_RED
	exit 1
}

# ошибка базы данных
# $1 - текст сообщения
db_error(){
	some_error 'DB' "$1" $C_RED
}

# логирование дополнительной информации
# $1 - текст сообщения
log_it(){
	some_error 'INFO' "$1" $C_WHITE
}

# логирование со статусом "выполняется..."
# $1 - текст сообщения
log_inprogress(){
	some_error '=>' "$1" $C_YELLOW
}

# логирование со статусом "завершено"
# $1 - текст сообщения
# $2 - текст статуса в скобках []
# $3 - текст с скобках [] в конце строки: [OK] [ERROR] etc.
log_inprogress_complete(){
	echo -e "${C_YELLOW}[$2] $4\033[s$1\033[u\033[60C$5[$3]${C_NONE}"
	echo "[$3] $1" >> $LOG_FILE
}

# логирование со статусом "завершено успешно"
# $1 - текст сообщения
log_inprogress_ok(){
	[ -z $2 ] && R='OK'
	[ -z $2 ] || R=$2
	log_inprogress_complete "$1" '##' "$R" $C_white $C_GREEN
}

# логирование со статусом "завершено с ошибкой"
# $1 - текст сообщения
log_inprogress_error(){
	[ -z $2 ] && R='ERROR'
	[ -z $2 ] || R=$2
	log_inprogress_complete "$1" '!!' "$R" $C_white $C_RED
}

# логирование со статусом "завершено с комментарием"
# $1 - текст сообщения
# $2 - текст в скобках [] конца строки - OK, ERROR, NEW, etc.
log_inprogress_info(){
	log_inprogress_complete "$1" '##' "$2" $C_white $C_CYAN
}

# Лог-список с выбором маркера
# $1 - номер уровня вложенности
# $2 - текст сообщения
# $3 - маркер
log_stages(){
	[ -z "$3" ] && marker="=>" || marker="$3"
	level=""
	for i in `seq 1 $1`; do
		level="${level}   "
	done
	echo -e "${level}${C_YELLOW}$marker ${C_white}$2${C_NONE}"
	echo "${level}=> $2" >> $LOG_FILE
}

fi
